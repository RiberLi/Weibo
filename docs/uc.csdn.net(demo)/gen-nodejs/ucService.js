//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./ucScore_types');
//HELPER FUNCTIONS AND STRUCTURES

ucService_get_scorelevel_args = function(args) {
  this.username = null;
  this.score_type = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score_type !== undefined) {
      this.score_type = args.score_type;
    }
  }
};
ucService_get_scorelevel_args.prototype = {};
ucService_get_scorelevel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.score_type = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI32();
          this.score_type.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_scorelevel_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_scorelevel_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score_type !== null && this.score_type !== undefined) {
    output.writeFieldBegin('score_type', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.score_type.length);
    for (var iter71 in this.score_type)
    {
      if (this.score_type.hasOwnProperty(iter71))
      {
        iter71 = this.score_type[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_scorelevel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_scorelevel_result.prototype = {};
ucService_get_scorelevel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_scorelevel_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_scorelevel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_score_args = function(args) {
  this.username = null;
  this.score_type = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score_type !== undefined) {
      this.score_type = args.score_type;
    }
  }
};
ucService_get_score_args.prototype = {};
ucService_get_score_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.score_type = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readI32();
          this.score_type.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_score_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_score_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score_type !== null && this.score_type !== undefined) {
    output.writeFieldBegin('score_type', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.score_type.length);
    for (var iter79 in this.score_type)
    {
      if (this.score_type.hasOwnProperty(iter79))
      {
        iter79 = this.score_type[iter79];
        output.writeI32(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_score_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_score_result.prototype = {};
ucService_get_score_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CScoreMedalResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_score_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_score_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_codeinfo_args = function(args) {
  this.score_type = null;
  if (args) {
    if (args.score_type !== undefined) {
      this.score_type = args.score_type;
    }
  }
};
ucService_get_codeinfo_args.prototype = {};
ucService_get_codeinfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.score_type = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32();
          this.score_type.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_codeinfo_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_codeinfo_args');
  if (this.score_type !== null && this.score_type !== undefined) {
    output.writeFieldBegin('score_type', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.score_type.length);
    for (var iter87 in this.score_type)
    {
      if (this.score_type.hasOwnProperty(iter87))
      {
        iter87 = this.score_type[iter87];
        output.writeI32(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_codeinfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_codeinfo_result.prototype = {};
ucService_get_codeinfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CodeInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_codeinfo_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_codeinfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_userfreeze_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
ucService_userfreeze_args.prototype = {};
ucService_userfreeze_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_userfreeze_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_userfreeze_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_userfreeze_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_userfreeze_result.prototype = {};
ucService_userfreeze_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_userfreeze_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_userfreeze_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_unuserfreeze_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
ucService_unuserfreeze_args.prototype = {};
ucService_unuserfreeze_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_unuserfreeze_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_unuserfreeze_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_unuserfreeze_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_unuserfreeze_result.prototype = {};
ucService_unuserfreeze_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_unuserfreeze_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_unuserfreeze_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_importscore_args = function(args) {
  this.username = null;
  this.operusername = null;
  this.type_score = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.operusername !== undefined) {
      this.operusername = args.operusername;
    }
    if (args.type_score !== undefined) {
      this.type_score = args.type_score;
    }
  }
};
ucService_importscore_args.prototype = {};
ucService_importscore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.operusername = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.type_score = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var key94 = null;
          var val95 = null;
          key94 = input.readI32();
          val95 = input.readI32();
          this.type_score[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_importscore_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_importscore_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.operusername !== null && this.operusername !== undefined) {
    output.writeFieldBegin('operusername', Thrift.Type.STRING, 2);
    output.writeString(this.operusername);
    output.writeFieldEnd();
  }
  if (this.type_score !== null && this.type_score !== undefined) {
    output.writeFieldBegin('type_score', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.type_score));
    for (var kiter96 in this.type_score)
    {
      if (this.type_score.hasOwnProperty(kiter96))
      {
        var viter97 = this.type_score[kiter96];
        output.writeI32(kiter96);
        output.writeI32(viter97);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_importscore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_importscore_result.prototype = {};
ucService_importscore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImportResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_importscore_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_importscore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_scorelog_args = function(args) {
  this.username = null;
  this.type = null;
  this.begindate = null;
  this.enddate = null;
  this.pagesize = null;
  this.pageno = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.begindate !== undefined) {
      this.begindate = args.begindate;
    }
    if (args.enddate !== undefined) {
      this.enddate = args.enddate;
    }
    if (args.pagesize !== undefined) {
      this.pagesize = args.pagesize;
    }
    if (args.pageno !== undefined) {
      this.pageno = args.pageno;
    }
  }
};
ucService_get_scorelog_args.prototype = {};
ucService_get_scorelog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.begindate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.enddate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.pagesize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pageno = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_scorelog_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_scorelog_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.begindate !== null && this.begindate !== undefined) {
    output.writeFieldBegin('begindate', Thrift.Type.STRING, 3);
    output.writeString(this.begindate);
    output.writeFieldEnd();
  }
  if (this.enddate !== null && this.enddate !== undefined) {
    output.writeFieldBegin('enddate', Thrift.Type.STRING, 4);
    output.writeString(this.enddate);
    output.writeFieldEnd();
  }
  if (this.pagesize !== null && this.pagesize !== undefined) {
    output.writeFieldBegin('pagesize', Thrift.Type.I32, 5);
    output.writeI32(this.pagesize);
    output.writeFieldEnd();
  }
  if (this.pageno !== null && this.pageno !== undefined) {
    output.writeFieldBegin('pageno', Thrift.Type.I32, 6);
    output.writeI32(this.pageno);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_scorelog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_scorelog_result.prototype = {};
ucService_get_scorelog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LogInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_scorelog_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_scorelog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_level_args = function(args) {
  this.username = null;
  this.score_type = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score_type !== undefined) {
      this.score_type = args.score_type;
    }
  }
};
ucService_get_level_args.prototype = {};
ucService_get_level_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.score_type = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readI32();
          this.score_type.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_level_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_level_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score_type !== null && this.score_type !== undefined) {
    output.writeFieldBegin('score_type', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.score_type.length);
    for (var iter105 in this.score_type)
    {
      if (this.score_type.hasOwnProperty(iter105))
      {
        iter105 = this.score_type[iter105];
        output.writeI32(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_level_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_level_result.prototype = {};
ucService_get_level_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreLevelInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_level_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_level_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_cscore_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
ucService_get_cscore_args.prototype = {};
ucService_get_cscore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_cscore_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_cscore_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_cscore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_cscore_result.prototype = {};
ucService_get_cscore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CScoreInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_cscore_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_cscore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_medal_args = function(args) {
  this.username = null;
  this.product_type = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.product_type !== undefined) {
      this.product_type = args.product_type;
    }
  }
};
ucService_get_medal_args.prototype = {};
ucService_get_medal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.product_type = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readI32();
          this.product_type.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_medal_args.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_medal_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.product_type !== null && this.product_type !== undefined) {
    output.writeFieldBegin('product_type', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.product_type.length);
    for (var iter113 in this.product_type)
    {
      if (this.product_type.hasOwnProperty(iter113))
      {
        iter113 = this.product_type[iter113];
        output.writeI32(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucService_get_medal_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ucService_get_medal_result.prototype = {};
ucService_get_medal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MedalInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ucService_get_medal_result.prototype.write = function(output) {
  output.writeStructBegin('ucService_get_medal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ucServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ucServiceClient.prototype = {};
ucServiceClient.prototype.get_scorelevel = function(username, score_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_scorelevel(username, score_type);
};

ucServiceClient.prototype.send_get_scorelevel = function(username, score_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_scorelevel', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_scorelevel_args();
  args.username = username;
  args.score_type = score_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_scorelevel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_scorelevel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_scorelevel failed: unknown result');
};
ucServiceClient.prototype.get_score = function(username, score_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_score(username, score_type);
};

ucServiceClient.prototype.send_get_score = function(username, score_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_score', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_score_args();
  args.username = username;
  args.score_type = score_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_score = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_score_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_score failed: unknown result');
};
ucServiceClient.prototype.get_codeinfo = function(score_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_codeinfo(score_type);
};

ucServiceClient.prototype.send_get_codeinfo = function(score_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_codeinfo', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_codeinfo_args();
  args.score_type = score_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_codeinfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_codeinfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_codeinfo failed: unknown result');
};
ucServiceClient.prototype.userfreeze = function(username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_userfreeze(username);
};

ucServiceClient.prototype.send_userfreeze = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('userfreeze', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_userfreeze_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_userfreeze = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_userfreeze_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('userfreeze failed: unknown result');
};
ucServiceClient.prototype.unuserfreeze = function(username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_unuserfreeze(username);
};

ucServiceClient.prototype.send_unuserfreeze = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unuserfreeze', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_unuserfreeze_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_unuserfreeze = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_unuserfreeze_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unuserfreeze failed: unknown result');
};
ucServiceClient.prototype.importscore = function(username, operusername, type_score, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_importscore(username, operusername, type_score);
};

ucServiceClient.prototype.send_importscore = function(username, operusername, type_score) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importscore', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_importscore_args();
  args.username = username;
  args.operusername = operusername;
  args.type_score = type_score;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_importscore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_importscore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importscore failed: unknown result');
};
ucServiceClient.prototype.get_scorelog = function(username, type, begindate, enddate, pagesize, pageno, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_scorelog(username, type, begindate, enddate, pagesize, pageno);
};

ucServiceClient.prototype.send_get_scorelog = function(username, type, begindate, enddate, pagesize, pageno) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_scorelog', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_scorelog_args();
  args.username = username;
  args.type = type;
  args.begindate = begindate;
  args.enddate = enddate;
  args.pagesize = pagesize;
  args.pageno = pageno;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_scorelog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_scorelog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_scorelog failed: unknown result');
};
ucServiceClient.prototype.get_level = function(username, score_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_level(username, score_type);
};

ucServiceClient.prototype.send_get_level = function(username, score_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_level', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_level_args();
  args.username = username;
  args.score_type = score_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_level = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_level_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_level failed: unknown result');
};
ucServiceClient.prototype.get_cscore = function(username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_cscore(username);
};

ucServiceClient.prototype.send_get_cscore = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_cscore', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_cscore_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_cscore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_cscore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cscore failed: unknown result');
};
ucServiceClient.prototype.get_medal = function(username, product_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_medal(username, product_type);
};

ucServiceClient.prototype.send_get_medal = function(username, product_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_medal', Thrift.MessageType.CALL, this.seqid);
  var args = new ucService_get_medal_args();
  args.username = username;
  args.product_type = product_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ucServiceClient.prototype.recv_get_medal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ucService_get_medal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_medal failed: unknown result');
};
ucServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ucServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ucServiceProcessor.prototype.process_get_scorelevel = function(seqid, input, output) {
  var args = new ucService_get_scorelevel_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_scorelevel(args.username, args.score_type, function (err, result) {
    var result = new ucService_get_scorelevel_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_scorelevel", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_score = function(seqid, input, output) {
  var args = new ucService_get_score_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_score(args.username, args.score_type, function (err, result) {
    var result = new ucService_get_score_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_score", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_codeinfo = function(seqid, input, output) {
  var args = new ucService_get_codeinfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_codeinfo(args.score_type, function (err, result) {
    var result = new ucService_get_codeinfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_codeinfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_userfreeze = function(seqid, input, output) {
  var args = new ucService_userfreeze_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.userfreeze(args.username, function (err, result) {
    var result = new ucService_userfreeze_result((err != null ? err : {success: result}));
    output.writeMessageBegin("userfreeze", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_unuserfreeze = function(seqid, input, output) {
  var args = new ucService_unuserfreeze_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.unuserfreeze(args.username, function (err, result) {
    var result = new ucService_unuserfreeze_result((err != null ? err : {success: result}));
    output.writeMessageBegin("unuserfreeze", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_importscore = function(seqid, input, output) {
  var args = new ucService_importscore_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.importscore(args.username, args.operusername, args.type_score, function (err, result) {
    var result = new ucService_importscore_result((err != null ? err : {success: result}));
    output.writeMessageBegin("importscore", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_scorelog = function(seqid, input, output) {
  var args = new ucService_get_scorelog_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_scorelog(args.username, args.type, args.begindate, args.enddate, args.pagesize, args.pageno, function (err, result) {
    var result = new ucService_get_scorelog_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_scorelog", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_level = function(seqid, input, output) {
  var args = new ucService_get_level_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_level(args.username, args.score_type, function (err, result) {
    var result = new ucService_get_level_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_level", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_cscore = function(seqid, input, output) {
  var args = new ucService_get_cscore_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_cscore(args.username, function (err, result) {
    var result = new ucService_get_cscore_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_cscore", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ucServiceProcessor.prototype.process_get_medal = function(seqid, input, output) {
  var args = new ucService_get_medal_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_medal(args.username, args.product_type, function (err, result) {
    var result = new ucService_get_medal_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_medal", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

