//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ScoreInfo = module.exports.ScoreInfo = function(args) {
  this.type = null;
  this.username = null;
  this.score = null;
  this.level = null;
  this.diffvalue = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.diffvalue !== undefined) {
      this.diffvalue = args.diffvalue;
    }
  }
};
ScoreInfo.prototype = {};
ScoreInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.diffvalue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreInfo.prototype.write = function(output) {
  output.writeStructBegin('ScoreInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 3);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 4);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.diffvalue !== null && this.diffvalue !== undefined) {
    output.writeFieldBegin('diffvalue', Thrift.Type.I32, 5);
    output.writeI32(this.diffvalue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreInfoResult = module.exports.ScoreInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
ScoreInfoResult.prototype = {};
ScoreInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.result = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ScoreInfo();
          elem6.read(input);
          this.result.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreInfoResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter7 in this.result)
    {
      if (this.result.hasOwnProperty(iter7))
      {
        iter7 = this.result[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CScoreMedal = module.exports.CScoreMedal = function(args) {
  this.type = null;
  this.username = null;
  this.score = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
  }
};
CScoreMedal.prototype = {};
CScoreMedal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CScoreMedal.prototype.write = function(output) {
  output.writeStructBegin('CScoreMedal');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 3);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CScoreMedalResult = module.exports.CScoreMedalResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
CScoreMedalResult.prototype = {};
CScoreMedalResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.result = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.CScoreMedal();
          elem14.read(input);
          this.result.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CScoreMedalResult.prototype.write = function(output) {
  output.writeStructBegin('CScoreMedalResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter15 in this.result)
    {
      if (this.result.hasOwnProperty(iter15))
      {
        iter15 = this.result[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CodeInfo = module.exports.CodeInfo = function(args) {
  this.type = null;
  this.codename = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.codename !== undefined) {
      this.codename = args.codename;
    }
  }
};
CodeInfo.prototype = {};
CodeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.codename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeInfo.prototype.write = function(output) {
  output.writeStructBegin('CodeInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.codename !== null && this.codename !== undefined) {
    output.writeFieldBegin('codename', Thrift.Type.STRING, 2);
    output.writeString(this.codename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CodeInfoResult = module.exports.CodeInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
CodeInfoResult.prototype = {};
CodeInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.result = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.CodeInfo();
          elem22.read(input);
          this.result.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeInfoResult.prototype.write = function(output) {
  output.writeStructBegin('CodeInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter23 in this.result)
    {
      if (this.result.hasOwnProperty(iter23))
      {
        iter23 = this.result[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInfo = module.exports.UserInfo = function(args) {
  this.username = null;
  this.status = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
UserInfo.prototype = {};
UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 2);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInfoResult = module.exports.UserInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
UserInfoResult.prototype = {};
UserInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.result = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.UserInfo();
          elem30.read(input);
          this.result.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfoResult.prototype.write = function(output) {
  output.writeStructBegin('UserInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter31 in this.result)
    {
      if (this.result.hasOwnProperty(iter31))
      {
        iter31 = this.result[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ImportResult = module.exports.ImportResult = function(args) {
  this.err = null;
  this.msg = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
ImportResult.prototype = {};
ImportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImportResult.prototype.write = function(output) {
  output.writeStructBegin('ImportResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CScoreInfo = module.exports.CScoreInfo = function(args) {
  this.type = null;
  this.username = null;
  this.score = null;
  this.status = null;
  this.image_url = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.image_url !== undefined) {
      this.image_url = args.image_url;
    }
  }
};
CScoreInfo.prototype = {};
CScoreInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.image_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CScoreInfo.prototype.write = function(output) {
  output.writeStructBegin('CScoreInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 3);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.image_url !== null && this.image_url !== undefined) {
    output.writeFieldBegin('image_url', Thrift.Type.STRING, 5);
    output.writeString(this.image_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CScoreInfoResult = module.exports.CScoreInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
CScoreInfoResult.prototype = {};
CScoreInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.result = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.CScoreInfo();
          elem38.read(input);
          this.result.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CScoreInfoResult.prototype.write = function(output) {
  output.writeStructBegin('CScoreInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter39 in this.result)
    {
      if (this.result.hasOwnProperty(iter39))
      {
        iter39 = this.result[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreLevelInfo = module.exports.ScoreLevelInfo = function(args) {
  this.type = null;
  this.username = null;
  this.score = null;
  this.level = null;
  this.diffvalue = null;
  this.percent = null;
  this.image_url = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.diffvalue !== undefined) {
      this.diffvalue = args.diffvalue;
    }
    if (args.percent !== undefined) {
      this.percent = args.percent;
    }
    if (args.image_url !== undefined) {
      this.image_url = args.image_url;
    }
  }
};
ScoreLevelInfo.prototype = {};
ScoreLevelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.diffvalue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.percent = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.image_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreLevelInfo.prototype.write = function(output) {
  output.writeStructBegin('ScoreLevelInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 3);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 4);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.diffvalue !== null && this.diffvalue !== undefined) {
    output.writeFieldBegin('diffvalue', Thrift.Type.I32, 5);
    output.writeI32(this.diffvalue);
    output.writeFieldEnd();
  }
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.I32, 6);
    output.writeI32(this.percent);
    output.writeFieldEnd();
  }
  if (this.image_url !== null && this.image_url !== undefined) {
    output.writeFieldBegin('image_url', Thrift.Type.STRING, 7);
    output.writeString(this.image_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreLevelInfoResult = module.exports.ScoreLevelInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
ScoreLevelInfoResult.prototype = {};
ScoreLevelInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.result = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ScoreLevelInfo();
          elem46.read(input);
          this.result.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreLevelInfoResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreLevelInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter47 in this.result)
    {
      if (this.result.hasOwnProperty(iter47))
      {
        iter47 = this.result[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MedalInfo = module.exports.MedalInfo = function(args) {
  this.type = null;
  this.username = null;
  this.score = null;
  this.image_url = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.image_url !== undefined) {
      this.image_url = args.image_url;
    }
  }
};
MedalInfo.prototype = {};
MedalInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MedalInfo.prototype.write = function(output) {
  output.writeStructBegin('MedalInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 3);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.image_url !== null && this.image_url !== undefined) {
    output.writeFieldBegin('image_url', Thrift.Type.STRING, 4);
    output.writeString(this.image_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MedalInfoResult = module.exports.MedalInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
MedalInfoResult.prototype = {};
MedalInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.result = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.MedalInfo();
          elem54.read(input);
          this.result.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MedalInfoResult.prototype.write = function(output) {
  output.writeStructBegin('MedalInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter55 in this.result)
    {
      if (this.result.hasOwnProperty(iter55))
      {
        iter55 = this.result[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogInfo = module.exports.LogInfo = function(args) {
  this.username = null;
  this.score = null;
  this.date = null;
  this.product = null;
  this.desc = null;
  this.count = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.product !== undefined) {
      this.product = args.product;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
LogInfo.prototype = {};
LogInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogInfo.prototype.write = function(output) {
  output.writeStructBegin('LogInfo');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 2);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 3);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 4);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 5);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogInfoResult = module.exports.LogInfoResult = function(args) {
  this.err = null;
  this.msg = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
LogInfoResult.prototype = {};
LogInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.err = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.result = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.LogInfo();
          elem62.read(input);
          this.result.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogInfoResult.prototype.write = function(output) {
  output.writeStructBegin('LogInfoResult');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.BYTE, 1);
    output.writeByte(this.err);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter63 in this.result)
    {
      if (this.result.hasOwnProperty(iter63))
      {
        iter63 = this.result[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

