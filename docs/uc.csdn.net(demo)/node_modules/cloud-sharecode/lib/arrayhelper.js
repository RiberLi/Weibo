/*
 函数：向对象数组中添加对象数组
 参数：对象数组或单个对象
 返回：返回添加后的对象数组
 调用方式：var result=list.Add({Id:66,Age:66});
 var result=list.Add([{Id:66,Age:66},{Id:77,Age:77}]);
 */
Array.prototype.Add = function (obj) {
    obj instanceof Array ? this.push.apply(this, obj) : this.push.call(this, obj);
    return this;
};

/*
 函数：根据条件从对象数组中获取一个对象
 参数：匿名函数，字段，值
 返回：查找到的对象，如果没有查找到返回null
 调用方式：var result=list.FindOne(function (o) { return o.Age>30; });
 var result=list.FindOne(function () { return this.Age>30; });
 var result=list.FindOne("Age",22);
 */
Array.prototype.FindOne = function (property, value) {
    var fn = typeof property === "function" ? property : function () { return this[property] == value; };
    for (var i = 0, len = this.length; i < len; i++) {
        var o = this[i];
        if (fn.call(o, o)) {
            return o;
        }
    }
    return null;
};

/*
 函数：根据条件查询对象数组
 参数：匿名函数；字段，值
 返回：查找到的对象数组
 调用方式：var result=list.FindAll(function (m) { return m.Age>30; });
 var result=list.FindAll(function () { return this.Age>30; });
 var result=list.FindAll("Age",22);
 */

Array.prototype.FindAll = function (property, value) {
    var arr = [], fn = typeof property === "function" ? property : function () { return this[property] == value; };
    for (var i = 0, len = this.length; i < len; i++) {
        var o = this[i];
        if (fn.call(o, o)) {
            arr.push(o);
        }
    }
    return arr;
};

/*
 函数：将对象数组中的每个对象投影到新的对象中
 参数：匿名函数
 返回：返回新的对象数组
 调用方式：var result=list.Select(function () { return {Id=this.Id,Age:this.Age}; });
 var result=list.Select(function (m) { return {Id=m.Id,Age:m.Age}; });
 */
Array.prototype.Select = function (fn) {
    var arr = [];
    for (var i = 0, len = this.length; i < len; i++) {
        var o = this[i];
        var item=fn.call(o, o);if(item){arr.push(item);}    }
    return arr;
};

/*
 函数：从对象数组中删除符合条件的对象
 参数：匿名函数；字段，值
 返回：返回删除后的对象数组
 调用方式：var result=list.Del(function (m) { return m.Age>30; });
 var result=list.Del(function () { return this.Age>30; });
 var result=list.Del("Age",22);
 */
Array.prototype.Del = function (property, value) {
    var fn = typeof property === "function" ? property : function () { return this[property] == value; };
    for (var i = 0; i < this.length; i++) {
        var o = this[i];
        if (fn.call(o, o)) {
            this.splice(i, 1);
            i--;
        }
    }
    return this;
};