module.exports = function(conconfig){
    var arrayhelper = require("./lib/arrayhelper");
    var mysql = require("mysql");

    var sharecode = {};
    var codeclass = []
        , codeitem = {};

    var init = function(){
        var conn = mysql.createConnection(conconfig);
        conn.connect();
        conn.query("Select * From CodeClass;", [], function(err, result) {
            if(err) throw err;
            codeclass = result;
        });
        var query = conn.query("Select * from CodeItem Order By ClassID;");
        var codeid = 0, tcodes =[];
        query.on('result', function(row) {
            conn.pause();
            if(codeid > 0 && codeid != row.ClassID){
                codeitem[codeid] = tcodes;
                tcodes = [];
            }
            tcodes.push(row);
            codeid = row.ClassID;
            conn.resume();
        }).on("end", function(){
                console.log("cloud-sharecode initiation complete.");
            });
        conn.end();
    };

    init();

    sharecode.GetCodeAsync = function(classID, codeID, cb){
        if(typeof cb != "function"){
            throw "parameter cb should be a function!";
        }

        if(codeitem[classID]){
            cb(codeitem[classID].FindOne(function(){return this.CodeID == codeID;}));
        }else{
            init();
            var sql = "Select * From CodeItem Where ClassID=? And CodeID=?;";
            var conn = mysql.createConnection(conconfig);
            conn.connect();
            conn.query(sql, [classID, codeID], function(err, result) {
                if(err) throw err;
                cb(result[0]);
            });
            conn.end();
        }
    };

    sharecode.GetCodeSync = function(classID, codeID){
        if(codeitem[classID]){
            return codeitem[classID].FindOne(function(){return this.CodeID == codeID;});
        }
        init();
        return null;
    };

    sharecode.GetCodesAsync = function(classID, cb){
        if(typeof cb != "function"){
            throw "parameter cb should be a function!";
        }

        if(codeitem[classID]){
            cb(codeitem[classID]);
        }else{
            init();
            var sql = "Select * From CodeItem Where ClassID=?;";
            var conn = mysql.createConnection(conconfig);
            conn.connect();
            conn.query(sql, [classID], function(err, result) {
                if(err) throw err;
                cb( result);
            });
            conn.end();
        }
    };

    sharecode.GetCodesSync = function(classID){
        if(codeitem[classID]){
            return codeitem[classID];
        }
        init();
        return null;
    };

    sharecode.GetCodesByParentIDAsync = function(classID, parentID,cb){
        if(typeof cb != "function"){
            throw "parameter cb should be a function!";
        }

        if(codeitem[classID]){
            cb(codeitem[classID].FindAll(function(){return this.ParentID == parentID;}));
        }else{
            init();
            var sql = "Select * From CodeItem Where ClassID=? And ParentID=?;";
            var conn = mysql.createConnection(conconfig);
            conn.connect();
            conn.query(sql, [classID, parentID], function(err, result) {
                if(err) throw err;
                cb( result);
            });
            conn.end();
        }
    };

    sharecode.GetCodesByParentIDSync = function(classID, parentID){
        if(codeitem[classID]){
            return codeitem[classID].FindAll(function(){return this.ParentID == parentID;});
        }
        init();
        return null;
    };

    sharecode.GetCodesByLevelAsync = function(classID, level, cb){
        if(typeof cb != "function"){
            throw "parameter cb should be a function!";
        }

        if(codeitem[classID]){
            cb(codeitem[classID].FindAll(function(){return this.Lvl == level;}));
        }else{
            init();
            var sql = "Select * From CodeItem Where ClassID=? And Lvl=?;";
            var conn = mysql.createConnection(conconfig);
            conn.connect();
            conn.query(sql, [classID, level], function(err, result) {
                if(err) throw err;
                cb( result);
            });
            conn.end();
        }
    };

    sharecode.GetCodesByLevelSync = function(classID, level){
        if(codeitem[classID]){
            return codeitem[classID].FindAll(function(){return this.Lvl == level;});
        }
        init();
        return null;
    };

    return sharecode;
};